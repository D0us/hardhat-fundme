{
  "address": "0x0cf67355A990389A2893251D69f1F8586BEa27ae",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ffaa8d37e69d32e1e97022471ce557c93e7db0ba8bce11492542fca83948e5c",
  "receipt": {
    "to": null,
    "from": "0xe12bb330d443001a7f16354779b613B4868D779D",
    "contractAddress": "0x0cf67355A990389A2893251D69f1F8586BEa27ae",
    "transactionIndex": 14,
    "gasUsed": "1052113",
    "logsBloom": "0x
    "blockHash": "0xcb758e38a19527f1ba4f8d17e5dd3ad5814d159638ba6641c68a1aae0473b5e5",
    "transactionHash": "0x3ffaa8d37e69d32e1e97022471ce557c93e7db0ba8bce11492542fca83948e5c",
    "logs": [],
    "blockNumber": 7639616,
    "cumulativeGasUsed": "5544322",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x779877A7B0D9E8603169DdbD7836e478b4624789"
  ],
  "numDeployments": 3,
  "solcInputHash": "ad50310dde4c99cd62eacc9fabc4263b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aldu\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\nerror FundMe__NotOwner();\\n/**\\n * @author Aldu\\n */\\ncontract FundMe {\\n\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n    address[] public s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18; // 50 usd * 19 to adjust for the fact everything is in wei\\n    AggregatorV3Interface private s_priceFeed;\\n    \\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }    \\n\\n    function fund() public payable {\\n        // require(msg.value.getConversionRate(priceFeedAddress) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        uint256 ethAmountInUsd = msg.value.getConversionRate(s_priceFeed);\\n        // string memory ethAmountInUsdString = Strings.toString(s);\\n        require(ethAmountInUsd >= MINIMUM_USD, \\\"You need to spend more ETH\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    // function getConversion(uint256 eth) public view returns (uint256) {\\n    //     return getConversionRate(eth, s_priceFeed);\\n    // }\\n    \\n    function getVersion() public view returns (uint256){\\n        return s_priceFeed.version();\\n    }\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    function withdraw() public payable onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess);\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\\n\\n\",\"keccak256\":\"0x3ded9baa75591d3257c6e3f536c026861a2ea69c647760594e188ac521ef5a1e\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     priceFeedAddress\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xfab0bf12220a864d93249a3ddf7b215de5bc81cdd90573b678d27f8d2ccee8a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012ab380380620012ab83398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b61113f806200016c6000396000f3fe60806040526004361061007b5760003560e01c80636b69a5921161004e5780636b69a5921461012f578063b60d42881461015a578063be2693f014610164578063dba6335f1461016e5761007b565b80630d8e6e2c146100805780631bf6132d146100ab5780633ccfd60b146100e857806354861af7146100f2575b600080fd5b34801561008c57600080fd5b50610095610199565b6040516100a29190610a7a565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd9190610af8565b610240565b6040516100df9190610a7a565b60405180910390f35b6100f0610258565b005b3480156100fe57600080fd5b5061011960048036038101906101149190610b51565b61049a565b6040516101269190610b8d565b60405180910390f35b34801561013b57600080fd5b506101446104d9565b6040516101519190610a7a565b60405180910390f35b6101626104e6565b005b61016c610626565b005b34801561017a57600080fd5b506101836108b8565b6040516101909190610b8d565b60405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561020357600080fd5b505afa158015610217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023b9190610bbd565b905090565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102df576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561038a5760006001828154811061030557610304610bea565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061038290610c48565b9150506102e2565b50600067ffffffffffffffff8111156103a6576103a5610c91565b5b6040519080825280602002602001820160405280156103d45781602001602082028036833780820191505090505b50600190805190602001906103ea9291906109ba565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161041190610cf1565b60006040518083038185875af1925050503d806000811461044e576040519150601f19603f3d011682016040523d82523d6000602084013e610453565b606091505b5050905080610497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048e90610d63565b60405180910390fd5b50565b600181815481106104aa57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b600061051d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108de90919063ffffffff16565b90506802b5e3af16b188000081101561056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056290610dcf565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105b99190610def565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ad576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561073157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e7575b5050505050905060005b81518110156107bb57600082828151811061075957610758610bea565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b390610c48565b91505061073b565b50600067ffffffffffffffff8111156107d7576107d6610c91565b5b6040519080825280602002602001820160405280156108055781602001602082028036833780820191505090505b506001908051906020019061081b9291906109ba565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161086490610cf1565b60006040518083038185875af1925050503d80600081146108a1576040519150601f19603f3d011682016040523d82523d6000602084013e6108a6565b606091505b50509050806108b457600080fd5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806108ea8361091a565b90506000670de0b6b3a764000085836109039190610e45565b61090d9190610ece565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096357600080fd5b505afa158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190610f77565b5050509150506402540be400816109b29190610ff2565b915050919050565b828054828255906000526020600020908101928215610a33579160200282015b82811115610a325782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109da565b5b509050610a409190610a44565b5090565b5b80821115610a5d576000816000905550600101610a45565b5090565b6000819050919050565b610a7481610a61565b82525050565b6000602082019050610a8f6000830184610a6b565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac582610a9a565b9050919050565b610ad581610aba565b8114610ae057600080fd5b50565b600081359050610af281610acc565b92915050565b600060208284031215610b0e57610b0d610a95565b5b6000610b1c84828501610ae3565b91505092915050565b610b2e81610a61565b8114610b3957600080fd5b50565b600081359050610b4b81610b25565b92915050565b600060208284031215610b6757610b66610a95565b5b6000610b7584828501610b3c565b91505092915050565b610b8781610aba565b82525050565b6000602082019050610ba26000830184610b7e565b92915050565b600081519050610bb781610b25565b92915050565b600060208284031215610bd357610bd2610a95565b5b6000610be184828501610ba8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c5382610a61565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c8657610c85610c19565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cdb600083610cc0565b9150610ce682610ccb565b600082019050919050565b6000610cfc82610cce565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d4d600b83610d06565b9150610d5882610d17565b602082019050919050565b60006020820190508181036000830152610d7c81610d40565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448000000000000600082015250565b6000610db9601a83610d06565b9150610dc482610d83565b602082019050919050565b60006020820190508181036000830152610de881610dac565b9050919050565b6000610dfa82610a61565b9150610e0583610a61565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e3a57610e39610c19565b5b828201905092915050565b6000610e5082610a61565b9150610e5b83610a61565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9457610e93610c19565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ed982610a61565b9150610ee483610a61565b925082610ef457610ef3610e9f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f1e81610eff565b8114610f2957600080fd5b50565b600081519050610f3b81610f15565b92915050565b6000819050919050565b610f5481610f41565b8114610f5f57600080fd5b50565b600081519050610f7181610f4b565b92915050565b600080600080600060a08688031215610f9357610f92610a95565b5b6000610fa188828901610f2c565b9550506020610fb288828901610f62565b9450506040610fc388828901610ba8565b9350506060610fd488828901610ba8565b9250506080610fe588828901610f2c565b9150509295509295909350565b6000610ffd82610f41565b915061100883610f41565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561104757611046610c19565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561108457611083610c19565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110c1576110c0610c19565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110fe576110fd610c19565b5b82820290509291505056fea26469706673582212208ff25069fcb0e37cc8696243353736bf3e4ebfbb034a9497ae535d168d7d773064736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80636b69a5921161004e5780636b69a5921461012f578063b60d42881461015a578063be2693f014610164578063dba6335f1461016e5761007b565b80630d8e6e2c146100805780631bf6132d146100ab5780633ccfd60b146100e857806354861af7146100f2575b600080fd5b34801561008c57600080fd5b50610095610199565b6040516100a29190610a7a565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd9190610af8565b610240565b6040516100df9190610a7a565b60405180910390f35b6100f0610258565b005b3480156100fe57600080fd5b5061011960048036038101906101149190610b51565b61049a565b6040516101269190610b8d565b60405180910390f35b34801561013b57600080fd5b506101446104d9565b6040516101519190610a7a565b60405180910390f35b6101626104e6565b005b61016c610626565b005b34801561017a57600080fd5b506101836108b8565b6040516101909190610b8d565b60405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561020357600080fd5b505afa158015610217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023b9190610bbd565b905090565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102df576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561038a5760006001828154811061030557610304610bea565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061038290610c48565b9150506102e2565b50600067ffffffffffffffff8111156103a6576103a5610c91565b5b6040519080825280602002602001820160405280156103d45781602001602082028036833780820191505090505b50600190805190602001906103ea9291906109ba565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161041190610cf1565b60006040518083038185875af1925050503d806000811461044e576040519150601f19603f3d011682016040523d82523d6000602084013e610453565b606091505b5050905080610497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048e90610d63565b60405180910390fd5b50565b600181815481106104aa57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b600061051d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108de90919063ffffffff16565b90506802b5e3af16b188000081101561056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056290610dcf565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105b99190610def565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ad576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561073157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e7575b5050505050905060005b81518110156107bb57600082828151811061075957610758610bea565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b390610c48565b91505061073b565b50600067ffffffffffffffff8111156107d7576107d6610c91565b5b6040519080825280602002602001820160405280156108055781602001602082028036833780820191505090505b506001908051906020019061081b9291906109ba565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161086490610cf1565b60006040518083038185875af1925050503d80600081146108a1576040519150601f19603f3d011682016040523d82523d6000602084013e6108a6565b606091505b50509050806108b457600080fd5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806108ea8361091a565b90506000670de0b6b3a764000085836109039190610e45565b61090d9190610ece565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096357600080fd5b505afa158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190610f77565b5050509150506402540be400816109b29190610ff2565b915050919050565b828054828255906000526020600020908101928215610a33579160200282015b82811115610a325782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109da565b5b509050610a409190610a44565b5090565b5b80821115610a5d576000816000905550600101610a45565b5090565b6000819050919050565b610a7481610a61565b82525050565b6000602082019050610a8f6000830184610a6b565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac582610a9a565b9050919050565b610ad581610aba565b8114610ae057600080fd5b50565b600081359050610af281610acc565b92915050565b600060208284031215610b0e57610b0d610a95565b5b6000610b1c84828501610ae3565b91505092915050565b610b2e81610a61565b8114610b3957600080fd5b50565b600081359050610b4b81610b25565b92915050565b600060208284031215610b6757610b66610a95565b5b6000610b7584828501610b3c565b91505092915050565b610b8781610aba565b82525050565b6000602082019050610ba26000830184610b7e565b92915050565b600081519050610bb781610b25565b92915050565b600060208284031215610bd357610bd2610a95565b5b6000610be184828501610ba8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c5382610a61565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c8657610c85610c19565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cdb600083610cc0565b9150610ce682610ccb565b600082019050919050565b6000610cfc82610cce565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d4d600b83610d06565b9150610d5882610d17565b602082019050919050565b60006020820190508181036000830152610d7c81610d40565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448000000000000600082015250565b6000610db9601a83610d06565b9150610dc482610d83565b602082019050919050565b60006020820190508181036000830152610de881610dac565b9050919050565b6000610dfa82610a61565b9150610e0583610a61565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e3a57610e39610c19565b5b828201905092915050565b6000610e5082610a61565b9150610e5b83610a61565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9457610e93610c19565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ed982610a61565b9150610ee483610a61565b925082610ef457610ef3610e9f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f1e81610eff565b8114610f2957600080fd5b50565b600081519050610f3b81610f15565b92915050565b6000819050919050565b610f5481610f41565b8114610f5f57600080fd5b50565b600081519050610f7181610f4b565b92915050565b600080600080600060a08688031215610f9357610f92610a95565b5b6000610fa188828901610f2c565b9550506020610fb288828901610f62565b9450506040610fc388828901610ba8565b9350506060610fd488828901610ba8565b9250506080610fe588828901610f2c565b9150509295509295909350565b6000610ffd82610f41565b915061100883610f41565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561104757611046610c19565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561108457611083610c19565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110c1576110c0610c19565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110fe576110fd610c19565b5b82820290509291505056fea26469706673582212208ff25069fcb0e37cc8696243353736bf3e4ebfbb034a9497ae535d168d7d773064736f6c63430008080033",
  "devdoc": {
    "author": "Aldu",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 286,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 289,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 291,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 301,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}